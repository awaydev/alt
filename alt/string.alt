// get string slice
bind strslice r#"/* strslice */ let mut c = get_float(stack.pop().unwrap()) as isize; let mut b = get_float(stack.pop().unwrap()) as isize; let a = get_string(stack.pop().unwrap());
if c < 0 { c = a.len() as isize + c; }
if b < 0 { b = a.len() as isize + b; }
stack.push(Value::String(a[b as usize .. c as usize].to_string()));"#

// get char in the string
macro getchar {
    let s index {
        s index 0 s - index + 1 + strslice
    }
}

// join the array with the some char
bind join r#" // join
let a = get_string(stack.pop().unwrap()); let b = get_array(stack.pop().unwrap());
let c = b.iter().map(|x| get_string(x.clone())).collect::<Vec<String>>();
stack.push(Value::String(c.join(&a)));
"#

// length of string. also works for arrays
bind len "/* len */ let a = stack.pop().unwrap(); stack.push(Value::Real(get_float(a)));"