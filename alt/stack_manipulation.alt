// (a -- a a)
bind dup "
// dup
let a = stack.pop().unwrap();
stack.push(a.clone()); stack.push(a.clone());
"

// (a b -- b a)
bind swap "
// swap
let b = stack.pop().unwrap(); let a = stack.pop().unwrap();
stack.push(b.clone()); stack.push(a.clone());
"

// (a b c -- b c a)
bind rot "
// rot
let c = stack.pop().unwrap(); let b = stack.pop().unwrap(); let a = stack.pop().unwrap();
stack.push(b.clone()); stack.push(c.clone()); stack.push(a.clone());
"

// (a b -- a b a)
bind over "
// over
let b = stack.pop().unwrap(); let a = stack.pop().unwrap();
stack.push(a.clone()); stack.push(b.clone()); stack.push(a.clone());
"

// (a b -- a)
bind drop "
// drop
let b = stack.pop().unwrap();
"

// pushes to stack stack itself
bind stack "stack.push(Value::Arr(stack.clone()));"

// stack length
bind stacklen "stack.push(Value::Real(stack.len() as f64));"

// free the stack
bind freestack "stack.clear();"